package handlers

import (
	"fmt"
	`log`

	"github.com/labstack/echo/v5"
	"github.com/pocketbase/pocketbase"
	"github.com/pocketbase/pocketbase/core"
	`github.com/pocketbase/pocketbase/models`

	`github.com/lgnixai/sugua/orm`
	`github.com/lgnixai/sugua/pkg/server/opml`
	worker `github.com/lgnixai/sugua/work`
)

type FeedCreateForm struct {
	Url      string `json:"url"`
	FolderID *int64 `json:"folder_id,omitempty"`
}

func FeedAdd(c echo.Context, app *pocketbase.PocketBase) error {

	collection, err := app.Dao().FindCollectionByNameOrId("feeds")
	if err != nil {
		return err
	}

	record := models.NewRecord(collection)

	// set individual fields
	// or bulk load with record.Load(map[string]any{...})
	record.Set("title", "Lorem ipsum")

	if err := app.Dao().SaveRecord(record); err != nil {
		return c.JSON(400, err)
	}
	//article := &model.Feed{
	//	Title: "Lorem ipsum",
	//}
	//
	//// the id is autogenerated, but you can set a specific one if you want to:
	//// article.SetId("...")
	//
	//if err := app.Dao().Save(article); err != nil {
	//	return c.JSON(400, err)
	//}
	return c.JSON(200, record)
}
func FeedAddAffter(e *core.RecordCreateEvent, app *pocketbase.PocketBase) error {

	result, err := worker.DiscoverFeed(e.Record.GetString("feed_link"))

	switch {
	case err != nil:
		log.Printf("Faild to discover feed for %s: %s", e.Record.GetString("feed_link"), err)
		//c.JSON(http.StatusOK, map[string]string{"status": "notfound"})
	case len(result.Sources) > 0:
		log.Printf("Feed for %s", e.Record.GetString("feed_link"))
		//c.JSON(http.StatusOK, map[string]interface{}{"status": "multiple", "choice": result.Sources})
	case result.Feed != nil:
		//record, err := app.Dao().FindRecordById("feeds", "RECORD_ID")
		//if err != nil {
		//	return err
		//}
		record := e.Record
		// set individual fields
		// or bulk load with record.Load(map[string]any{...})
		record.Set("title", result.Feed.Title)
		record.Set("link", result.Feed.SiteURL)

		if err := app.Dao().SaveRecord(record); err != nil {
			return err
		}
		feed := &orm.Feeds{

			Title:    result.Feed.Title,
			FeedLink: result.FeedLink,
		}
		feed.SetId(e.Record.GetString("id"))
		items := worker.ConvertItems(result.Feed.Items, *feed)

		if len(items) > 0 {

			orm.CreateItems(app.Dao(), items)

			orm.SetFeedSize(app.Dao(), feed.Id, len(items))
			orm.SyncSearch(app.Dao())
		}

		worker.MyWorker.FindFeedFavicon(feed)

		//c.JSON(http.StatusOK, map[string]interface{}{
		//	"status": "success",
		//	"feed":   feed,
		//})
	default:
		//c.JSON(http.StatusOK, map[string]string{"status": "notfound"})
	}

	return nil
}

func FeedList(c echo.Context, app *pocketbase.PocketBase) error {
	query := app.Dao().RecordQuery("feeds").
		OrderBy("score DESC")

	records := []*models.Record{}
	if err := query.All(&records); err != nil {
		return c.JSON(404, nil)
	}

	return c.JSON(200, records)

}
func OPMLImport(c echo.Context, app *pocketbase.PocketBase) error {

	file, err := c.FormFile("File")
	if err != nil {
		return err
	}
	//如何把file 转成  io.Reader
	fileReader, _ := file.Open()

	doc, err := opml.Parse(fileReader)
	if err != nil {
		return err
	}
	collection, err := app.Dao().FindCollectionByNameOrId("feeds")

	for _, f := range doc.Feeds {
		if err != nil {
			return err
		}

		record := models.NewRecord(collection)

		// set individual fields
		// or bulk load with record.Load(map[string]any{...})
		record.Set("title", f.Title)
		record.Set("description", "")
		record.Set("link", f.SiteUrl)
		record.Set("feed_link", f.FeedUrl)
		record.Set("icon", "")

		if err := app.Dao().SaveRecord(record); err != nil {
			return c.JSON(400, err)
		}

	}
	//for _, f := range doc.Folders {
	//	folder := s.db.CreateFolder(f.Title)
	//	for _, ff := range f.AllFeeds() {
	//		s.db.CreateFeed(ff.Title, "", ff.SiteUrl, ff.FeedUrl, &folder.Id)
	//	}
	//}
	w := worker.NewWorker(app)
	w.FindFavicons()
	w.RefreshFeeds()

	return c.JSON(200, "blueprint")
}

// registerArtists registers the "/artists" route in the provided PocketBase application.
// It adds a GET handler for the "/artists" route that calls the processArtists function.
func registerFeeds(app *pocketbase.PocketBase) {

	app.OnBeforeServe().Add(func(e *core.ServeEvent) error {
		rss := e.Router.Group("/api/rss")

		rss.GET("/feeds", func(c echo.Context) error {

			return FeedList(c, app)
		})
		rss.POST("/feeds", func(c echo.Context) error {

			return FeedAdd(c, app)
		})
		rss.POST("/opml/import", func(c echo.Context) error {

			return OPMLImport(c, app)
		})

		return nil
	})

	app.OnRecordAfterCreateRequest().Add(func(e *core.RecordCreateEvent) error {
		log.Println(e.HttpContext)
		log.Println(e.Record)
		log.Println(e.UploadedFiles)

		fmt.Println("======")
		fmt.Println(e.Collection.Name)
		switch e.Collection.Name {
		case "feeds":
			return FeedAddAffter(e, app)
		}
		return nil
	})
}
